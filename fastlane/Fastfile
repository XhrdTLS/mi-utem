import '../ios/fastlane/Fastfile'
import '../android/fastlane/Fastfile'

default_platform(:mobile)

platform :mobile do

  lane :sync_match do
    match(
      app_identifier: [ENV["APP_IDENTIFIER_IOS"], ENV["APP_IDENTIFIER_IOS"] + ".MiUtemNotificationServiceExtension"],
      type: "appstore",
      git_url: ENV["MATCH_REPO_GIT_URL"],
      readonly: is_ci,
      keychain_name: ENV["KEYCHAIN_NAME"],
      keychain_password: ENV["KEYCHAIN_PASSWORD"],
    )
  end

  lane :translate_changelog do |options|
    changelog = options[:changelog]

    if changelog.include? "Added"
      changelog["Added"] = "Añadido"
    end
    if changelog.include? "Changed"
      changelog["Changed"] = "Cambiado"
    end
    if changelog.include? "Deprecated"
      changelog["Deprecated"] = "Deprecado"
    end
    if changelog.include? "Removed"
      changelog["Removed"] = "Removido"
    end
    if changelog.include? "Fixed"
      changelog["Fixed"] = "Corregido"
    end

    if changelog.include? "Security"
      changelog["Security"] = "Seguridad"
    end

    changelog
  end

  lane :test do |options|
    skip_slack = false
    skip_android_test = false
    skip_ios_test = false

    if options[:skip_slack]
      skip_slack = options[:skip_slack]
    end

    if options[:skip_android_test]
      skip_android_test = options[:skip_android_test]
    end

    if options[:skip_ios_test]
      skip_ios_test = options[:skip_ios_test]
    end

    puts "Testing Fastlane for mobile"

    changelog = read_changelog
    emojified_changelog = emojify_changelog

    changelog = translate_changelog(changelog: changelog)
    emojified_changelog = translate_changelog(changelog: emojified_changelog)

    puts "Changelog: #{changelog}"
    puts "Emojified Changelog: #{emojified_changelog}"

    unless skip_android_test
      android_test
    end

    unless skip_ios_test
      ios_test
    end

    unless skip_slack
        slack(
          message: "Este es un mensaje de prueba desde Fastlane",
          channel: "proy-mi-utem-bots",
          default_payloads: [],
          attachment_properties: {
            fields: [
              {
                title: "Campo",
                value: "Prueba"
              },
            ]
          },
        )
    end
  end

  desc "Lee el archivo ../pubspec.yaml, obtiene la version y su numero de compilación"
  lane :get_pubspec_version do
    pubspec = File.read("../pubspec.yaml")
    version = pubspec.match(/version: (.+)/)[1]
    build_name = version.match(/(\d+\.\d+\.\d+)/)[1]
    build_number = ((version.match(/(\d+)$/)[1]).to_i + 1).to_s

    {
        "build_name" => build_name,
        "build_number" => build_number
    }
  end

  desc "Incrementa el numero de compilación en el archivo ../pubspec.yaml"
  lane :increment_pubspec_build_number do
    version = get_pubspec_version()
    build_number = version["build_number"]
    build_name = version["build_name"]

    puts "Incrementando el numero de compilación en el archivo ../pubspec.yaml"
    new_version = "version: #{build_name}+#{build_number}"

    pubspec = File.read("../pubspec.yaml")
    pubspec = pubspec.gsub(/version: (.+)/, new_version)
    File.write("../pubspec.yaml", pubspec)

    puts "Numero de compilación incrementado en el archivo ../pubspec.yaml"
  end

  lane :upload do |options|
    version = get_pubspec_version()
    build_number = version["build_number"]  # Obtiene la version del pubspec.yaml
    build_name = version["build_name"]      # Obtiene el numero de compilación del pubspec.yaml
    changelog = read_changelog
    emojified_changelog = emojify_changelog
    changelog = translate_changelog(changelog: changelog)
    emojified_changelog = translate_changelog(changelog: emojified_changelog)
    type = "release"
    skip_android = false
    skip_ios = false
    skip_clean = false
    skip_match = false
    skip_cocoapods = false
    skip_git_push = false
    skip_slack = false
    is_ci = false

    puts "Construyendo app con version #{build_name} (#{build_number})"

    if options[:build_number]
      build_number = options[:build_number]
    end

    if options[:build_name]
      build_name = options[:build_name]
    end

    if options[:type] == "release" || options[:type] == "beta"
      type = options[:type]
    end

    if options[:skip_android]
      skip_android = options[:skip_android]
    end

    if options[:skip_ios]
      skip_ios = options[:skip_ios]
    end

    if options[:skip_clean]
      skip_clean = options[:skip_clean]
    end

    if options[:skip_match]
      skip_match = options[:skip_match]
    end

    if options[:skip_cocoapods]
      skip_cocoapods = options[:skip_cocoapods]
    end

    if options[:skip_git_push]
      skip_git_push = options[:skip_git_push]
    end

    if options[:skip_slack]
      skip_slack = options[:skip_slack]
    end

    if options[:is_ci]
      is_ci = options[:is_ci]
    end

    if build_name
      build_name = build_name.tr('v', '')
    end

    unless skip_android
      android_build_and_upload(
        build_number: build_number,
        build_name: build_name,
        changelog: changelog,
        type: type,
        is_ci: is_ci,
        skip_clean: skip_clean,
      )
    end

    unless skip_ios
      ios_build_and_upload(
        build_number: build_number,
        build_name: build_name,
        changelog: changelog,
        type: type,
        skip_clean: skip_clean || !skip_android,
        skip_match: skip_match,
        skip_cocoapods: skip_cocoapods,
        is_ci: is_ci,
      )
    end

    if options[:type] == "release"
      stamp_changelog(
        section_identifier: build_name,
        git_tag: build_name,
      )
    end

    unless skip_git_push
      push_to_git_remote
      git_add
      git_commit(path: "*", message: "Stamp changelog for #{build_name} (#{build_number})")
      push_to_git_remote

      github_release = set_github_release(
        repository_name: "exdevutem/mi-utem",
        api_token: ENV["GITHUB_TOKEN"],
        name: "v#{build_name}",
        tag_name: "v#{build_name}",
        description: emojified_changelog,
        commitish: "dev",
        upload_assets: ["./build/app/outputs/bundle/release/app-release.aab", "./build/app/outputs/apk/release/app-release.apk"]
      )
    end

    unless skip_slack
      slack(
      message: "🚀 Se ha publicado la nueva versión #{build_name} (#{build_number})",
      channel: "proy-mi-utem",
      default_payloads: [],
      attachment_properties: {
        fields: [
          {
            title: "",
            value: "--------------------------------------"
          },
          {
            title: "",
            value: emojified_changelog
          },
        ]
      },
    )
    end

    puts "App construida y publicada con éxito"
    increment_pubspec_build_number()
  end
end